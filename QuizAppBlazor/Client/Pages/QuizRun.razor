@using QuizAppBlazor.Shared.DTOs;
@using System.Text.Json;
@using System.Text;
@using System.Timers;
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="d-flex flex-wrap align-self-center justify-content-center flex-column align-content-center card-body"
     style=" border-radius: 10px; max-width:500px; background-color:whitesmoke; padding: 1.5rem; margin-bottom: 1rem">
    @if (questions != null)
    {
        if (!isRunning)
        {
            <div style="text-align: center;">
                <h2>You have @correctAnswers correct answers!</h2>
                <button @onclick="Done" class="btn btn-primary" style="font-size:2rem">Done! 🥳</button>
            </div>
        }
        else
        {
            <div style="text-align: center;">
                @if (questions[qIndex].IsImage == true)
                {
                    <img src="@questions[qIndex].ImageVideo" style="width: 100%; border-radius: 4px;" />
                }
                else if (questions[qIndex].IsVideo == true)
                {
                    <video style="margin:0px; padding:0px; width: 100%;" id="video" controls>
                        <source src="@questions[qIndex].ImageVideo" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                }
                else if (questions[qIndex].IsYoutubeVideo == true)
                {
                    <iframe id="youtube" style="width: 100%; max-width: 400px; max-height: 250px; height: 100vh;"
                            src="//www.youtube.com/embed/@questions[qIndex].ImageVideo" 
                        title="YouTube video player" frameborder="0" 
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
                        allowfullscreen></iframe>
                }

                <h5 style="margin:2rem;">@questions[qIndex].Question</h5>
                @if (questions[qIndex].HasTimeLimit == true)
                {
                    <p>Time left: @Time</p>
                }
            </div>



            @if (questions[qIndex].IsTextInput == true)
            {
                <EditForm disabled="@isDisabled" Model="@textModel" OnSubmit="() => AnswerByText(textModel.Text)" class="align-self-center d-flex flex-column" style="width:100%; max-width:300px;">
                    <InputTextArea disabled="@isDisabled" @bind-Value="textModel.Text" rows="2"></InputTextArea>
                    <button disabled="@isDisabled" type="submit" class="btn btn-primary" style="margin-top: 15px; margin-bottom: 10px;">Answer</button>
                </EditForm>
                @* <p>Input: @textModel.Text</p>
                <p>Correct: @questions[qIndex].CorrectAnswer</p> *@
            }
            else
            {
                @for (int i = 0; i < answerList.Count; i++)
                {
                    int index = i; //Local copy of i is needed due to issue with lambda expression in blazor webassembly
                    <button disabled="@isDisabled" @onclick="() => Answer(index)" class="btn btn-primary" style="margin:0.5rem;">@answerList[i]</button>
                }
            }


            <br />
            <div class="d-flex flex-row justify-content-between">
                <p>Question @(qIndex + 1) / @(questions.Length)</p>
                @if (isCorrect == true)
                {
                    <p>Correct answer!</p>
                }
                @if (isIncorrect == true)
                {
                    <p>Wrong answer babuu :(</p>
                }
                @if (isTimeOut == true)
                {
                    <p>Times out babuu!</p>
                }

                @if (btnVisible == false)
                {
                    <button @onclick="Next" class="btn btn-warning invisible">Next!</button>
                }
                else
                {
                    <button @onclick="Next" class="btn btn-warning visible">Next!</button>
                }

                


            </div>
            
        }
    }
</div>


@code {
    [Parameter]
    public string Id { get; set; }

    private GetQuestionsDTO[]? questions;
    private int qIndex = 0;
    private bool isRunning = true;
    private bool isDisabled = false;
    private bool btnVisible = false;
    private bool isCorrect;
    private bool isIncorrect;
    private int correctAnswers = 0;
    private UserScoreDTO UserScore;
    private System.Timers.Timer _timer = null!;
    private int _secondsToRun = 0;
    protected string Time { get; set; } = "00:00";
    public bool isTimeOut = false;


    public void StartTime(int secondsToRun)
    {
        _secondsToRun = secondsToRun;
        if (_secondsToRun > 0)
        {
            Time = TimeSpan.FromSeconds(_secondsToRun).ToString(@"mm\:ss");
            StateHasChanged();
            _timer.Start();
        }
    }

    public event Action TimerOut;
    private async void OnTimedEvent(object? sender, ElapsedEventArgs e)
    {
        _secondsToRun--;
        await InvokeAsync(() =>
        {
            //CHECK IF TIME HAS RUN OUT
            if (_secondsToRun <= 0)
            {
                isTimeOut = true;
                TimeOut();
            }
            Time = TimeSpan.FromSeconds(_secondsToRun).ToString(@"mm\:ss");
            StateHasChanged();
        });
        if (_secondsToRun <= 0)
        {
            _timer.Stop();
            TimerOut?.Invoke();
        }
    }

    public void Dispose()
    {
        _timer.Dispose();
    }





    private TextInputModel textModel = new TextInputModel();
    public class TextInputModel
    {
        public string Text { get; set; }
    }

    private List<string> answerList = new List<string>();

    public void Answer(int aIndex)
    {
        _timer.Stop();
        Console.WriteLine("Index is: " + aIndex);

        isDisabled = true;
        btnVisible = true;

        if (answerList[aIndex] == questions[qIndex].CorrectAnswer)
        {
            isCorrect = true;
            isIncorrect = false;
            correctAnswers++;
        }
        else
        {
            isCorrect = false;
            isIncorrect = true;
        }
    }

    public void AnswerByText(string answer)
    {
        _timer.Stop();
        if (String.IsNullOrEmpty(answer))
        {
            answer = Guid.NewGuid().ToString();
        }

        Console.WriteLine("Answer by text is: " + answer);

        isDisabled = true;
        btnVisible = true;

        // Trim white space and make small caps
        if (answer.Trim().ToLower() == questions[qIndex].CorrectAnswer.Trim().ToLower())
        {
            isCorrect = true;
            isIncorrect = false;
            correctAnswers++;
        }
        else
        {
            isCorrect = false;
            isIncorrect = true;
        }
    }


    //TIMEOUT METHOD HERE, LOOKS LIKE ANSWER METHODS
    public void TimeOut()
    {
        Console.WriteLine("Timeout is: " + isTimeOut );
        isDisabled = true;
        btnVisible = true;
    }

    public void Next()
    {
        if (qIndex < (questions.Length - 1))
        {
            qIndex++;
            isDisabled = false;
            btnVisible = false;
            isCorrect = false;
            isIncorrect = false;
            isTimeOut = false;
        }
        else
        {
            isRunning = false;
            QuizFinished();
        }

        if (questions != null)
        {
            answerList.Clear();
            answerList.Add(questions[qIndex].CorrectAnswer);
            answerList.Add(questions[qIndex].Alternativ2);
            answerList.Add(questions[qIndex].Alternativ3);
            answerList.Add(questions[qIndex].Alternativ4);
            Shuffle(answerList);

            if (questions[qIndex].HasTimeLimit == true)
            {
                StartTime((int)questions[qIndex].TimeLimit);
            }
        }
    }

    private Random rng = new Random();
    public void Shuffle<T>(List<T> list)
    {
        int n = list.Count;
        while (n > 1)
        {
            n--;
            int k = rng.Next(n + 1);
            T value = list[k];
            list[k] = list[n];
            list[n] = value;
        }
    }

    private async Task QuizFinished()
    {
        UserScore = new UserScoreDTO() { LinkId = this.Id, CorrectAnswers = correctAnswers };
        var jsonPayLoad = JsonSerializer.Serialize(UserScore);
        var content = new StringContent(jsonPayLoad, Encoding.UTF8, "application/json");
        var response = await Http.PostAsync("api/score/post", content);
    }

    private void Done()
    {
        Navigation.NavigateTo("/quizzes");
    }


    protected override async Task OnInitializedAsync()
    {
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += OnTimedEvent;
        _timer.AutoReset = true;

        questions = await Http.GetFromJsonAsync<GetQuestionsDTO[]>($"api/question/{Id}");
        if (questions != null)
        {
            answerList.Clear();
            answerList.Add(questions[qIndex].CorrectAnswer);
            answerList.Add(questions[qIndex].Alternativ2);
            answerList.Add(questions[qIndex].Alternativ3);
            answerList.Add(questions[qIndex].Alternativ4);

            Shuffle(answerList);

            if (questions[qIndex].HasTimeLimit == true)
            {
                StartTime((int)questions[qIndex].TimeLimit);
            }
        }
        
    }
}
