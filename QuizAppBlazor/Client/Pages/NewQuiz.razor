@page "/newquiz"
@using QuizAppBlazor.Shared.DTOs
@using System.Text.Json;
@using System.Text;
@using System.Net;
@inject HttpClient _http
@inject NavigationManager Navigation

<div class="d-flex flex-column">
@if(showQuizForm == true)
{
    <div class="d-flex flex-column">
        <h3 class="title align-self-center flex-wrap">Create New Quiz</h3>
        <br />
        <div class="d-flex flex-wrap align-self-center justify-content-center flex-column" style="max-width: 300px">
            <EditForm Model="@quiz" OnSubmit="PostQuiz">
                <p>
                    <label for="title" class="form-label">Quiz Title: </label>
                    <InputText id="title" class="form-control" @bind-Value="quiz.Title" />
                </p>
                <p>
                    <label for="description" class="form-label">Description: </label>
                    <InputTextArea id="description" class="form-control" @bind-Value="quiz.Description" rows="3" />
                </p>
                <button type="submit" class="btn btn-primary">Create</button>
            </EditForm>
            <br />
            @* <span><b>Server response: </b>@requestStatus</span>
            <br /><br />
            <span><b>Json sent: </b>@json</span> *@
        </div>
    </div>
}
@if(showQuizForm != true)
{
    <div class="d-flex flex-wrap align-self-center justify-content-center flex-column">
        <h3 class="title align-self-center flex-wrap">Quiz created!</h3>
        <br/>
        <h2 class="align-self-center flex-wrap">@quiz.Title</h2>
        <h3 class="align-self-center flex-wrap">@quiz.Description</h3>
    </div>
    
}

<br /><br />
@if (showQuizForm != true)
{
    @if (showQuestionForm == true)
        {
            <div class="d-flex flex-column">
                <h3 class="title align-self-center flex-wrap">Add Question</h3>
                <br />
                <div class="d-flex flex-wrap align-self-center justify-content-center flex-column" style="max-width: 300px">
                    <EditForm Model="@question" OnSubmit="PostQuestion">
                        <p>
                            <label for="question" class="form-label">Question: </label>
                            <InputText id="question" class="form-control" @bind-Value="question.Question" />
                        </p>
                        <p>
                            <label for="answer" class="form-label">Correct answer: </label>
                            <InputText id="answer" class="form-control" @bind-Value="question.CorrectAnswer" />
                        </p>
                        <p>
                            <label for="alt2" class="form-label">Alternativ: </label>
                            <InputText id="alt2" class="form-control" @bind-Value="question.Alternativ2" />
                        </p>
                        <p>
                            <label for="alt3" class="form-label">Alternativ: </label>
                            <InputText id="alt3" class="form-control" @bind-Value="question.Alternativ3" />
                        </p>
                        <p>
                            <label for="alt4" class="form-label">Alternativ: </label>
                            <InputText id="alt4" class="form-control" @bind-Value="question.Alternativ4" />
                        </p>
                        <p>
                            <label for="imagevid" class="form-label">Link to image or video (URL): </label>
                            <InputText id="imagevid" class="form-control" @bind-Value="question.ImageVideo" />
                        </p>
                        <p>
                            <label for="timelimit" class="form-label">Has time limit: </label>
                            <InputCheckbox id="has-time-limit" @bind-Value="question.HasTimeLimit" />
                        </p>
                        <p >
                            <label for="duration" class="form-label">Duration in seconds: </label>
                            <InputNumber disabled="@{question.HasTimeLimit ? isDisabled : !isDisabled}" id="time-limit" class="form-control" @bind-Value="question.TimeLimit" />
                        </p>
                        <button type="submit" class="btn btn-primary" style="margin-top: 10px; margin-bottom: 30px;">Create</button>
                    </EditForm>
                    @* <br />
                    <span><b>Server response: </b>@quizId</span>
                    <br /><br />
                    <span class="flex-wrap"><b>Json sent: </b>@json2</span> *@
                </div>
            </div>
        }
    
}
    @if (showQuestionForm != true)
    {
        <h3 class="title align-self-center flex-wrap">Question added!</h3>
        <button class="btn btn-primary align-self-center justify-content-center" style="margin: 20px;" @onclick="NewQuestion">Add new question</button>
        <button class="btn btn-primary align-self-center justify-content-center" style="margin: 10px; padding: 1rem;" @onclick="NavigateFromPage">🎉<strong>Done!</strong>🎉</button>
    }
    
</div>

@{
    Console.WriteLine("Has time limit: " + question.HasTimeLimit);
}

@code {

    //Quiz form
    private bool showQuizForm = true;

    private CreateQuizDTO quiz = new CreateQuizDTO();
    private static string? json;
    private static string requestStatus;
    private Guid quizId;

    private async Task PostQuiz()
    {
        var jsonPayLoad = JsonSerializer.Serialize(quiz);
        json = jsonPayLoad;
        var content = new StringContent(jsonPayLoad, Encoding.UTF8, "application/json");
        var response = await _http.PostAsync("api/quiz/create", content);
        if (response.StatusCode == HttpStatusCode.OK)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonSerializer.Deserialize<Guid>(responseContent);
            quizId = result;
            Console.WriteLine(result);
            showQuizForm = false;
        }
        else
        {
            requestStatus = "BAD";
        }

    }


    //Question Form
    private bool showQuestionForm = true;
    private bool isDisabled = false;
    private CreateQuestionDTO question = new CreateQuestionDTO();
    private static string? json2;

    private async Task PostQuestion()
    {
        question.QuizId = quizId;
        var jsonPayLoad = JsonSerializer.Serialize(question);
        json2 = jsonPayLoad;
        var content = new StringContent(jsonPayLoad, Encoding.UTF8, "application/json");
        var response = await _http.PostAsync("api/question/create", content);
        showQuestionForm = false;
    }

    private void NewQuestion()
    {
        question = new CreateQuestionDTO();
        showQuestionForm = true;
    }



    private void HasChanged()
    {
        Console.WriteLine("Checked");
        //isDisabled = !isDisabled;
    }

    private void NavigateFromPage()
    {
        Navigation.NavigateTo("/quizzes"); //forceload "true" may be added here as a second parameter if necessary
    }
}
